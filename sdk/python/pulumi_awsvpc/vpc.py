# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['VpcArgs', 'Vpc']

@pulumi.input_type
class VpcArgs:
    def __init__(__self__, *,
                 availability_zone_names: Sequence[str],
                 base_cidr: str,
                 create_private_zone: Optional[bool] = None,
                 enable_dynamo_db_endpoint: Optional[pulumi.Input[bool]] = None,
                 enable_s3_endpoint: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 zone_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Vpc resource.
        :param Sequence[str] availability_zone_names: List of availability zones to use for your VPC.
        :param str base_cidr: The primary CIDRv4 block to be associated with the VPC.
        :param bool create_private_zone: Whether to create a private hosted zone attached to the VPC.
        :param pulumi.Input[bool] enable_dynamo_db_endpoint: Whether to add the DynamoDB endpoint to the VPC.
        :param pulumi.Input[bool] enable_s3_endpoint: Whether to add the S3 endpoint to the VPC.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags to be applied to each created resource.
        :param pulumi.Input[str] zone_name: The name of the private zone to create if createPrivateZone is set to true.
        """
        pulumi.set(__self__, "availability_zone_names", availability_zone_names)
        pulumi.set(__self__, "base_cidr", base_cidr)
        if create_private_zone is not None:
            pulumi.set(__self__, "create_private_zone", create_private_zone)
        if enable_dynamo_db_endpoint is not None:
            pulumi.set(__self__, "enable_dynamo_db_endpoint", enable_dynamo_db_endpoint)
        if enable_s3_endpoint is not None:
            pulumi.set(__self__, "enable_s3_endpoint", enable_s3_endpoint)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if zone_name is not None:
            pulumi.set(__self__, "zone_name", zone_name)

    @property
    @pulumi.getter(name="availabilityZoneNames")
    def availability_zone_names(self) -> Sequence[str]:
        """
        List of availability zones to use for your VPC.
        """
        return pulumi.get(self, "availability_zone_names")

    @availability_zone_names.setter
    def availability_zone_names(self, value: Sequence[str]):
        pulumi.set(self, "availability_zone_names", value)

    @property
    @pulumi.getter(name="baseCidr")
    def base_cidr(self) -> str:
        """
        The primary CIDRv4 block to be associated with the VPC.
        """
        return pulumi.get(self, "base_cidr")

    @base_cidr.setter
    def base_cidr(self, value: str):
        pulumi.set(self, "base_cidr", value)

    @property
    @pulumi.getter(name="createPrivateZone")
    def create_private_zone(self) -> Optional[bool]:
        """
        Whether to create a private hosted zone attached to the VPC.
        """
        return pulumi.get(self, "create_private_zone")

    @create_private_zone.setter
    def create_private_zone(self, value: Optional[bool]):
        pulumi.set(self, "create_private_zone", value)

    @property
    @pulumi.getter(name="enableDynamoDBEndpoint")
    def enable_dynamo_db_endpoint(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to add the DynamoDB endpoint to the VPC.
        """
        return pulumi.get(self, "enable_dynamo_db_endpoint")

    @enable_dynamo_db_endpoint.setter
    def enable_dynamo_db_endpoint(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_dynamo_db_endpoint", value)

    @property
    @pulumi.getter(name="enableS3Endpoint")
    def enable_s3_endpoint(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to add the S3 endpoint to the VPC.
        """
        return pulumi.get(self, "enable_s3_endpoint")

    @enable_s3_endpoint.setter
    def enable_s3_endpoint(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_s3_endpoint", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags to be applied to each created resource.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the private zone to create if createPrivateZone is set to true.
        """
        return pulumi.get(self, "zone_name")

    @zone_name.setter
    def zone_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone_name", value)


class Vpc(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 availability_zone_names: Optional[Sequence[str]] = None,
                 base_cidr: Optional[str] = None,
                 create_private_zone: Optional[bool] = None,
                 enable_dynamo_db_endpoint: Optional[pulumi.Input[bool]] = None,
                 enable_s3_endpoint: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 zone_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Vpc resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param Sequence[str] availability_zone_names: List of availability zones to use for your VPC.
        :param str base_cidr: The primary CIDRv4 block to be associated with the VPC.
        :param bool create_private_zone: Whether to create a private hosted zone attached to the VPC.
        :param pulumi.Input[bool] enable_dynamo_db_endpoint: Whether to add the DynamoDB endpoint to the VPC.
        :param pulumi.Input[bool] enable_s3_endpoint: Whether to add the S3 endpoint to the VPC.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags to be applied to each created resource.
        :param pulumi.Input[str] zone_name: The name of the private zone to create if createPrivateZone is set to true.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VpcArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Vpc resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VpcArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VpcArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 availability_zone_names: Optional[Sequence[str]] = None,
                 base_cidr: Optional[str] = None,
                 create_private_zone: Optional[bool] = None,
                 enable_dynamo_db_endpoint: Optional[pulumi.Input[bool]] = None,
                 enable_s3_endpoint: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 zone_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VpcArgs.__new__(VpcArgs)

            if availability_zone_names is None and not opts.urn:
                raise TypeError("Missing required property 'availability_zone_names'")
            __props__.__dict__["availability_zone_names"] = availability_zone_names
            if base_cidr is None and not opts.urn:
                raise TypeError("Missing required property 'base_cidr'")
            __props__.__dict__["base_cidr"] = base_cidr
            __props__.__dict__["create_private_zone"] = create_private_zone
            __props__.__dict__["enable_dynamo_db_endpoint"] = enable_dynamo_db_endpoint
            __props__.__dict__["enable_s3_endpoint"] = enable_s3_endpoint
            __props__.__dict__["tags"] = tags
            __props__.__dict__["zone_name"] = zone_name
            __props__.__dict__["vpc_id"] = None
        super(Vpc, __self__).__init__(
            'awsvpc:index:Vpc',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        The AWS-assigned ID of the VPC
        """
        return pulumi.get(self, "vpc_id")

