// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Vpc extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'awsvpc:index:Vpc';

    /**
     * Returns true if the given object is an instance of Vpc.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vpc {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vpc.__pulumiType;
    }

    /**
     * The IDs of the created private subnets
     */
    public /*out*/ readonly privateSubnetIds!: pulumi.Output<string[]>;
    /**
     * The IDs of the created public subnets
     */
    public /*out*/ readonly publicSubnetIds!: pulumi.Output<string[]>;
    /**
     * The AWS-assigned ID of the VPC
     */
    public /*out*/ readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a Vpc resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpcArgs, opts?: pulumi.ComponentResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.availabilityZoneNames === undefined) && !opts.urn) {
                throw new Error("Missing required property 'availabilityZoneNames'");
            }
            if ((!args || args.baseCidr === undefined) && !opts.urn) {
                throw new Error("Missing required property 'baseCidr'");
            }
            inputs["availabilityZoneNames"] = args ? args.availabilityZoneNames : undefined;
            inputs["baseCidr"] = args ? args.baseCidr : undefined;
            inputs["createPrivateZone"] = args ? args.createPrivateZone : undefined;
            inputs["enableDynamoDBEndpoint"] = args ? args.enableDynamoDBEndpoint : undefined;
            inputs["enableS3Endpoint"] = args ? args.enableS3Endpoint : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["zoneName"] = args ? args.zoneName : undefined;
            inputs["privateSubnetIds"] = undefined /*out*/;
            inputs["publicSubnetIds"] = undefined /*out*/;
            inputs["vpcId"] = undefined /*out*/;
        } else {
            inputs["privateSubnetIds"] = undefined /*out*/;
            inputs["publicSubnetIds"] = undefined /*out*/;
            inputs["vpcId"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Vpc.__pulumiType, name, inputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a Vpc resource.
 */
export interface VpcArgs {
    /**
     * List of availability zones to use for your VPC.
     */
    availabilityZoneNames: pulumi.Input<string>[];
    /**
     * The primary CIDRv4 block to be associated with the VPC.
     */
    baseCidr: string;
    /**
     * Whether to create a private hosted zone attached to the VPC.
     */
    createPrivateZone?: boolean;
    /**
     * Whether to add the DynamoDB endpoint to the VPC.
     */
    enableDynamoDBEndpoint?: pulumi.Input<boolean>;
    /**
     * Whether to add the S3 endpoint to the VPC.
     */
    enableS3Endpoint?: pulumi.Input<boolean>;
    /**
     * Tags to be applied to each created resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the private zone to create if createPrivateZone is set to true.
     */
    zoneName?: pulumi.Input<string>;
}
